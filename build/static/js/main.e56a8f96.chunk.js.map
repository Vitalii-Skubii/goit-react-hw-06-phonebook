{"version":3,"sources":["components/App.module.css","components/ContactList/ContactList.module.css","components/ContactFilter/ContactFilter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","components/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsAdd","createAction","name","number","payload","id","uuid","contactRemove","changeFilter","initionalState","ContactForm","state","changeFormHandler","target","value","setState","console","log","props","submitFormHandler","event","preventDefault","onAdd","validateForm","resetForm","contacts","alert","isUnique","find","contact","this","className","styles","form","onSubmit","input","type","placeholder","onChange","btn","Component","connect","items","dispatch","contactsActions","ContactItem","onRemove","listItem","onClick","filter","includes","toLowerCase","length","map","e","contactsRemove","wrapper","title","ContactFilter","createReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e56a8f96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2gJyo\",\"title\":\"App_title__3Pmz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__3vQkR\",\"btn\":\"ContactList_btn__2qbOQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactFilter_input__1VYmI\"};","// import actionTypes from './contacts-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuid } from 'uuid';\r\nconst contactsAdd = createAction('contacts/add', (name, number) => ({\r\n  payload: { id: uuid(), name, number },\r\n}));\r\n// const contactsAdd = (name, number) => ({\r\n//   type: actionTypes.CONTACTS_ADD,\r\n//   payload: { id: uuid(), name, number },\r\n// });\r\nconst contactRemove = createAction('contacts/remove');\r\n// const contactRemove = id => ({\r\n//   type: actionTypes.CONTACTS_REMOVE,\r\n//   payload: id,\r\n// });\r\nconst changeFilter = createAction('contacts/filter');\r\n// const changeFilter = value => ({\r\n//   type: actionTypes.CONTACTS_FILTER,\r\n//   payload: value,\r\n// });\r\nexport default { contactsAdd, contactRemove, changeFilter };\r\n","import { Component } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nconst initionalState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = initionalState;\r\n  changeFormHandler = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n    console.log(this.props);\r\n  };\r\n\r\n  submitFormHandler = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n\r\n    const isValidForm = this.validateForm();\r\n    if (!isValidForm) return;\r\n\r\n    onAdd(name, number);\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    if (!name || !number) {\r\n      alert('Fill in all fields');\r\n      return false;\r\n    }\r\n    const isUnique = contacts.find(contact => contact.name === name);\r\n    isUnique && alert('Contact is alredy in cotactList');\r\n    return !isUnique;\r\n  };\r\n\r\n  resetForm = () => this.setState(initionalState);\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.form} onSubmit={this.submitFormHandler}>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Enter name\"\r\n          value={name}\r\n          onChange={this.changeFormHandler}\r\n        />\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"Enter phone number\"\r\n          value={number}\r\n          onChange={this.changeFormHandler}\r\n        />\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({ contacts: state.contacts.items });\r\nconst mapDispatchToProps = dispatch => ({\r\n  onAdd: (name, number) => dispatch(contactsActions.contactsAdd(name, number)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nconst ContactItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={styles.listItem} key={id}>\r\n      {name}: {number}{' '}\r\n      <button className={styles.btn} onClick={() => onRemove(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <ContactItem {...contact} onRemove={onRemove} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// ContactItem.propTypes = {\r\n//   id: PropTypes.string.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string,\r\n//   onRemove: PropTypes.func,\r\n// };\r\n\r\n// getFilteredContacts = () => {\r\n//   const { contacts, filter } = this.state;\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { items, filter } = state.contacts;\r\n//   const normalisedFilter = filter.toLowerCase;\r\n//   const visibleContacts = items.filter(({ text }) =>\r\n//     text.toLowerCase().includes(normalisedFilter),\r\n//   );\r\n//   // return { contacts: state.contacts.items };\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   // const normalisedFilter = filter.toLowerCase();\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getVisibleContacts(items, filter),\r\n// });\r\nconst mapStateToProps = state => {\r\n  const { items, filter } = state.contacts;\r\n\r\n  // const visibleContacts = items.filter(({ name }) =>\r\n  //   name.toLowerCase.includes(filter.toLowerCase()),\r\n  // );\r\n  return {\r\n    contacts: items.filter(({ name }) => name.includes(filter.toLowerCase())),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(contactsActions.contactRemove(id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactFilter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nconst Filter = ({ filter, onChange }) => (\r\n  <input\r\n    className={styles.input}\r\n    type=\"text\"\r\n    name=\"filter\"\r\n    value={filter}\r\n    // onChange={({ target }) => onChange(target.value)}\r\n    onChange={onChange}\r\n    placeholder=\"Search contact\"\r\n  />\r\n);\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { Component } from 'react';\nimport React from 'react';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport ContactFilter from './ContactFilter';\nimport styles from './App.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../redux/contacts/contacts-actions';\n\nfunction App({ items, filter, onAdd, onRemove }) {\n  return (\n    <div className={styles.wrapper}>\n      <h2 className={styles.title}>Phonebook</h2>\n      <ContactForm\n      // onAdd={this.contactsAddHandler}\n      // uniqueCheck={this.checkContactUnique}\n      />\n      <h2 className={styles.title}>Contact List</h2>\n      <ContactFilter />\n      <ContactList\n      // contacts={visibleContact}\n      // onRemove={this.handleRemoveContact}\n      />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    items: state.items,\n    filter: state.filter,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAdd: value => dispatch(contactsActions.contactsAdd(value)),\n    onRemove: value => dispatch(contactsActions.contactsRemove(value)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// class App extends Component {}\n// state = {\n//   contacts: [\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   ],\n//   filter: '',\n// };\n\n// contactsAddHandler = newContact => {\n//   this.setState(({ contacts }) => ({ contacts: [...contacts, newContact] }));\n// };\n// checkContactUnique = name => {\n//   const { contacts } = this.state;\n//   const isUnique = !!contacts.find(contact => contact.name === name);\n//   isUnique && alert('Contact is alredy in cotactList');\n//   return !isUnique;\n// };\n\n// handleRemoveContact = id =>\n//   this.setState(({ contacts }) => ({\n//     contacts: contacts.filter(contact => contact.id !== id),\n//   }));\n\n// filterContactFilter = filter => this.setState({ filter });\n\n// getFilteredContacts = () => {\n//   const { contacts, filter } = this.state;\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n// };\n\n//   render() {\n//     // const { filter } = this.state;\n//     // const visibleContact = this.getFilteredContacts();\n//     return (\n\n//     );\n//   }\n\n// export default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import actionTypes from './contacts-types';\r\nimport contactsActions from './contacts-actions';\r\nconst items = createReducer([], {\r\n  [contactsActions.contactsAdd]: (state, { payload }) => [...state, payload],\r\n  [contactsActions.contactRemove]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.CONTACTS_ADD:\r\n//       return [...state, payload];\r\n\r\n//     case actionTypes.CONTACTS_REMOVE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (state, { payload }) => payload,\r\n});\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.CONTACTS_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nexport default combineReducers({ items, filter });\r\n\r\n// filter: filterReducer,\r\n// items: itemsReducer,\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst initialState = { contacts: { items: [], filter: '' } };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\n// export const store = configureStore({\r\n//   reducer: persistedReducer,\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\nexport const store = configureStore({\r\n  reducer: { contacts: persistReducer(contactsPersistConfig, contactsReducer) },\r\n\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './base.css';\nimport './reset.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__313j5\",\"input\":\"ContactForm_input__2I0UG\",\"btn\":\"ContactForm_btn__3eFUr\"};"],"sourceRoot":""}